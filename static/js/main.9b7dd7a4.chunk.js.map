{"version":3,"sources":["algorithms/SortMergeAlgo.js","sortingApp/SortingApplication.js","App.js","serviceWorker.js","index.js"],"names":["SortMergeAlgo","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingApplication","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","value","idx","key","onClick","mergeSort","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b7dd7a4.chunk.js","sourcesContent":["// export const mergeSort = array => {\r\n//     // return the same array if it has 1 value or less\r\n//     if(array.length <= 1) return array;\r\n//     const middleIdx = Math.floor(array.length / 2);\r\n//     const firstSide = mergeSort(array.slice(0, middleIdx));\r\n//     const secondSide = mergeSort(array.slice(middleIdx));\r\n//     let sortedArray = [];\r\n\r\n//     let i =0; let j= 0;\r\n//     while(i < firstSide.length && j < secondSide.length) {\r\n//         if(firstSide[i] < secondSide[j]) {\r\n//             sortedArray.push(firstSide[i++]);\r\n//         } else {\r\n//             sortedArray.push(secondSide[j++]);\r\n//         }\r\n//     }\r\n//     while(i < firstSide.length) sortedArray.push(firstSide[i++]);\r\n//     while(j < secondSide.length) sortedArray.push(secondSide[j++]);\r\n\r\n//     return sortedArray;\r\n// }\r\n\r\n\r\n\r\n// export function mergeSort(array) {\r\n//     const animations = [];\r\n//     if (array.length <= 1) return array;\r\n//     const auxiliaryArray = array.slice();\r\n//     mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n//     return animations;\r\n// }\r\n// function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n\r\n//     if (startIdx === endIdx) return;\r\n//     const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n//     mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n//     mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n//     doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n\r\n// }\r\n// function doMerge(mainArray, startIdx, middelIdx, endIdx, auxiliaryArray, animations) {\r\n\r\n//     let i = startIdx;\r\n//     let k = endIdx;\r\n//     let j = middelIdx + 1;\r\n\r\n//     while(i <= middelIdx && j <= middelIdx) {\r\n//         const animation = [];\r\n//         animation.comparison = [i, j];\r\n//         if(auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n//             animation.swap = [k, i];\r\n//             mainArray[k++] = auxiliaryArray[i++];\r\n//         } else {\r\n//             animation.swap = [k, j];\r\n//             mainArray[k++] = auxiliaryArray[j++];\r\n//         }\r\n//         animations.push(animation);\r\n//     }\r\n//     while(i <= middelIdx) {\r\n//         animations.push(comparison[i, i], swap[k, i]);\r\n//         mainArray[k++] = auxiliaryArray[i++];\r\n//     }\r\n//     while(j <= endIdx) {\r\n//         animations.push(comparison[j, j], swap[k, j]);\r\n//         mainArray[k++] = auxiliaryArray[j++];\r\n//     }\r\n\r\n// }\r\n\r\n\r\nexport function SortMergeAlgo(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport {SortMergeAlgo} from '../algorithms/SortMergeAlgo';\r\nimport './SortingApp.css';\r\n\r\n\r\nconst ANIMATION_SPEED_MS = 3;\r\n\r\n// The main color of the bars\r\nconst prColor = 'teal';\r\n\r\n// Comparison color\r\nconst ckColor = 'crimson';\r\n\r\nexport class SortingApplication extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < 150; i++) {\r\n            array.push(randomIntFromInterval(4, 600)); // number of values\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    // Sorting Method\r\n    mergeSort() {\r\n        // const newSortedArray = this.state.array.slice().sort(function(a, b){return a-b});\r\n        // // console.log(newSortedArray);\r\n        // const sortedArray = SortMergeAlgo.mergeSort(this.state.array);\r\n        // console.log(arrayCheck(newSortedArray, sortedArray));\r\n\r\n        const animations = SortMergeAlgo(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? ckColor : prColor;\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div style={{height: `${value}px`}} className=\"array-bar\" key={idx}></div>\r\n                ))}\r\n                <br />\r\n                <div className=\"footer\">\r\n                    {/* <img className=\"lg\" alt=\"sorting application\" src=\"../bird-icon.png\" /> */}\r\n                    <p className=\"name\">Sorting Application</p>\r\n                    <button className=\"resetBtn\" onClick={() => {this.resetArray()}}>Reset the array</button>\r\n                    <button className=\"sortingBtn\" onClick={() => {this.mergeSort()}}>Merge Sort</button>\r\n                    <button className=\"bubbleSort\">Bubble Sort <span className=\"note\">In the work</span></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// function arrayCheck(arrOne, arrTwo) {\r\n//     if(arrOne.length !== arrTwo.length) return false;\r\n//     for(let i = 0; i < arrOne.length; i++) {\r\n//         if(arrOne[i] !== arrTwo[i]) return false;\r\n//     }\r\n\r\n//     return true;\r\n// }\r\n\r\nexport default SortingApplication\r\n\r\n","\n// Made by : M.Youness\n// https://github.com/youness-marrakchi\n\n\nimport React from 'react'\nimport SortingApplication from './sortingApp/SortingApplication';\nimport './App.css';\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SortingApplication></SortingApplication>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}